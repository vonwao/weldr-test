'use client';

// @generated by Weldr.dev â€” form component managed. Extend validation or submission via @custom regions before editing generated code.
import { useEffect, useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import type { Order, OrderInput } from '@/lib/types';

interface OrderFormProps {
  initialData?: Order;
  onSubmit?: (data: OrderInput) => Promise<void> | void;
  onCancel?: () => void;
  isSubmitting?: boolean;
  error?: string | null;
}

export function OrderForm({
  initialData,
  onSubmit,
  onCancel,
  isSubmitting = false,
  error,
}: OrderFormProps) {
  const buildState = (source?: Order) => ({
    orderNumber: source?.orderNumber ?? '',
    status: source?.status ?? '',
    totalAmount: source?.totalAmount ?? '',
    orderDate: source?.orderDate ?? '',
  });

  const [formData, setFormData] = useState<OrderInput>(buildState(initialData));

  useEffect(() => {
    setFormData(buildState(initialData));
  }, [initialData]);

  const handleChange = (field: keyof OrderInput, value: unknown) => {
    setFormData((previous) => ({
      ...previous,
      [field]: value,
    }));
  };

  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    await onSubmit?.(formData);
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle>{initialData ? 'Edit' : 'Create'} Order</CardTitle>
        <CardDescription>
          {initialData ? 'Update the' : 'Fill in the'} details below
        </CardDescription>
      </CardHeader>
      <CardContent>
        {error ? (
          <div className="rounded border border-destructive/40 bg-destructive/5 px-3 py-2 text-sm text-destructive">
            {error}
          </div>
        ) : null}
        <form onSubmit={handleSubmit} className="space-y-4 mt-4">
          <div className="space-y-2">
            <Label htmlFor="orderNumber">Order Number</Label>
            <Input
              id="orderNumber"
              type="text"
              value={formData.orderNumber ?? ''}
              onChange={(e) => handleChange('orderNumber', e.target.value)}
              disabled={isSubmitting}
              required
            />
          </div>
          <div className="space-y-2">
            <Label htmlFor="status">Status</Label>
            <Input
              id="status"
              type="text"
              value={formData.status ?? ''}
              onChange={(e) => handleChange('status', e.target.value)}
              disabled={isSubmitting}
              required
            />
          </div>
          <div className="space-y-2">
            <Label htmlFor="totalAmount">Total Amount</Label>
            <Input
              id="totalAmount"
              type="text"
              value={formData.totalAmount ?? ''}
              onChange={(e) => handleChange('totalAmount', e.target.value)}
              disabled={isSubmitting}
              required
            />
          </div>
          <div className="space-y-2">
            <Label htmlFor="orderDate">Order Date</Label>
            <Input
              id="orderDate"
              type="datetime-local"
              value={formData.orderDate ?? ''}
              onChange={(e) => handleChange('orderDate', e.target.value)}
              disabled={isSubmitting}
              required
            />
          </div>

          <div className="flex gap-2">
            <Button type="submit" disabled={isSubmitting}>
              {isSubmitting ? 'Saving...' : initialData ? 'Update' : 'Create'}
            </Button>
            <Button type="button" variant="outline" onClick={onCancel} disabled={isSubmitting}>
              Cancel
            </Button>
          </div>
        </form>
      </CardContent>
    </Card>
  );
}
