'use client';

// @generated by Weldr.dev â€” component managed. Extend props or handlers in @custom regions before modifying.
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Plus, Edit, Trash2 } from 'lucide-react';
import type { Order } from '@/lib/types';

interface OrderListProps {
  items: Order[];
  isLoading?: boolean;
  onCreate?: () => void;
  onView?: (item: Order) => void;
  onEdit?: (item: Order) => void;
  onDelete?: (item: Order) => void;
}

export function OrderList({
  items,
  isLoading = false,
  onCreate,
  onView,
  onEdit,
  onDelete,
}: OrderListProps) {
  if (isLoading) {
    return (
      <div className="flex justify-center p-8">
        Loading order...
      </div>
    );
  }

  return (
    <div className="space-y-4">
      <div className="flex items-center justify-between">
        <h2 className="text-2xl font-bold">Order List</h2>
        <Button onClick={onCreate}>
          <Plus className="mr-2 h-4 w-4" />
          Add Order
        </Button>
      </div>

      {items.length === 0 ? (
        <Card>
          <CardContent className="flex flex-col items-center justify-center p-12 text-center">
            <p className="text-muted-foreground">No order found</p>
            <Button className="mt-4" onClick={onCreate}>
              Create your first order
            </Button>
          </CardContent>
        </Card>
      ) : (
        <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
          {items.map((item) => (
            <Card key={item.id}>
              <CardHeader>
                <CardTitle className="text-lg">
                  {item.orderNumber}
                </CardTitle>
                {item.createdAt ? (
                  <CardDescription>
                    Created: {new Date(item.createdAt).toLocaleDateString()}
                  </CardDescription>
                ) : null}
              </CardHeader>
              <CardContent>
                <div className="flex gap-2">
                  <Button
                    size="sm"
                    variant="outline"
                    onClick={() => onView?.(item)}
                  >
                    View
                  </Button>
                  <Button
                    size="sm"
                    variant="outline"
                    onClick={() => onEdit?.(item)}
                  >
                    <Edit className="mr-2 h-4 w-4" />
                    Edit
                  </Button>
                  <Button
                    size="sm"
                    variant="destructive"
                    onClick={() => {
                      if (confirm('Delete this record?')) {
                        onDelete?.(item);
                      }
                    }}
                  >
                    <Trash2 className="h-4 w-4" />
                  </Button>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      )}
    </div>
  );
}
