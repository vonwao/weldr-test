'use client';

// @generated by Weldr.dev â€” entity page managed. Customize page layout in @custom regions or Next.js route overrides.

import { useMemo, useState } from 'react';
import { OrderList } from '@/components/entities/OrderList';
import { OrderForm } from '@/components/entities/OrderForm';
import { OrderDetail } from '@/components/entities/OrderDetail';
import { Dialog, DialogContent } from '@/components/ui/dialog';
import {
  useOrderList,
  useOrderDetail,
  useCreateOrder,
  useUpdateOrder,
  useDeleteOrder,
} from '@/lib/generated/data/order';
import type { Order, OrderInput } from '@/lib/types';

export default function OrderPage() {
  const list = useOrderList();
  const [selectedId, setSelectedId] = useState<string | null>(null);
  const [dialogView, setDialogView] = useState<'form' | 'detail'>('form');
  const [dialogOpen, setDialogOpen] = useState(false);

  const detail = useOrderDetail(selectedId);

  const createAction = useCreateOrder({
    onSuccess: (record) => {
      void list.refresh();
      const id = (record as Order)?.id ?? null;
      setSelectedId(id);
      setDialogView('detail');
      setDialogOpen(true);
    },
  });

  const updateAction = useUpdateOrder({
    onSuccess: (record) => {
      void list.refresh();
      const id = (record as Order)?.id ?? selectedId;
      setSelectedId(id ?? null);
      setDialogView('detail');
      setDialogOpen(true);
    },
  });

  const deleteAction = useDeleteOrder({
    onSuccess: () => {
      void list.refresh();
      setDialogOpen(false);
      setDialogView('form');
      setSelectedId(null);
    },
  });

  const currentRecord = useMemo(() => {
    if (!selectedId) {
      return null;
    }
    return list.data?.find((item) => item.id === selectedId) ?? detail.data ?? null;
  }, [detail.data, list.data, selectedId]);

  const formAction = selectedId ? updateAction : createAction;
  const formError = formAction.error ? formAction.error.message : null;

  const resetActions = () => {
    createAction.reset();
    updateAction.reset();
    deleteAction.reset();
  };

  const handleCreate = () => {
    resetActions();
    setSelectedId(null);
    setDialogView('form');
    setDialogOpen(true);
  };

  const handleEdit = (item: Order) => {
    resetActions();
    setSelectedId(item.id);
    setDialogView('form');
    setDialogOpen(true);
  };

  const handleView = (item: Order) => {
    resetActions();
    setSelectedId(item.id);
    setDialogView('detail');
    setDialogOpen(true);
  };

  const handleDelete = async (item: Order) => {
    const result = await deleteAction.execute({ id: item.id });
    if (result.ok) {
      resetActions();
      setSelectedId(null);
      setDialogOpen(false);
    }
  };

  const handleCloseDialog = (open: boolean) => {
    if (!open) {
      setDialogOpen(false);
      setDialogView('form');
      resetActions();
    } else {
      setDialogOpen(true);
    }
  };

  const handleFormSubmit = async (values: OrderInput) => {
    if (selectedId) {
      const result = await updateAction.execute({ id: selectedId, ...values });
      if (result.ok) {
        resetActions();
        await list.refresh();
        setDialogView('detail');
        setDialogOpen(true);
      }
    } else {
      const result = await createAction.execute(values);
      if (result.ok) {
        const record = result.data as Order;
        resetActions();
        await list.refresh();
        setSelectedId(record?.id ?? null);
        setDialogView('detail');
        setDialogOpen(true);
      }
    }
  };

  return (
    <div className="container mx-auto py-8 space-y-6">
      {list.error ? (
        <div className="rounded border border-destructive/40 bg-destructive/5 px-4 py-2 text-sm text-destructive">
          {list.error.message}
        </div>
      ) : null}

      <OrderList
        items={list.data ?? []}
        isLoading={list.isLoading}
        onCreate={handleCreate}
        onView={handleView}
        onEdit={handleEdit}
        onDelete={(item) => {
          if (confirm('Delete this record?')) {
            void handleDelete(item);
          }
        }}
      />

      <Dialog open={dialogOpen} onOpenChange={handleCloseDialog}>
        <DialogContent className="sm:max-w-[640px]">
          {dialogView === 'form' && (
            <OrderForm
              initialData={currentRecord ?? undefined}
              onSubmit={handleFormSubmit}
              onCancel={() => handleCloseDialog(false)}
              isSubmitting={formAction.isLoading}
              error={formError}
            />
          )}

          {dialogView === 'detail' && selectedId ? (
            detail.isLoading ? (
              <div className="p-6 text-sm text-muted-foreground">Loading details...</div>
            ) : currentRecord ? (
              <OrderDetail
                item={currentRecord}
                onEdit={() => {
                  setDialogView('form');
                }}
                onDelete={() => void handleDelete(currentRecord)}
                isDeleting={deleteAction.isLoading}
              />
            ) : (
              <div className="p-6 text-sm text-muted-foreground">
                Record not found.
              </div>
            )
          ) : null}
        </DialogContent>
      </Dialog>
    </div>
  );
}
