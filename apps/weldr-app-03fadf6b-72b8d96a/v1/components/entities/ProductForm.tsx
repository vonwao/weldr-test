'use client';

// @generated by Weldr.dev â€” form component managed. Extend validation or submission via @custom regions before editing generated code.
import { useEffect, useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import type { Product, ProductInput } from '@/lib/types';

interface ProductFormProps {
  initialData?: Product;
  onSubmit?: (data: ProductInput) => Promise<void> | void;
  onCancel?: () => void;
  isSubmitting?: boolean;
  error?: string | null;
}

export function ProductForm({
  initialData,
  onSubmit,
  onCancel,
  isSubmitting = false,
  error,
}: ProductFormProps) {
  const buildState = (source?: Product) => ({
    name: source?.name ?? '',
    description: source?.description ?? '',
    price: source?.price ?? '',
    inStock: source?.inStock ?? false,
  });

  const [formData, setFormData] = useState<ProductInput>(buildState(initialData));

  useEffect(() => {
    setFormData(buildState(initialData));
  }, [initialData]);

  const handleChange = (field: keyof ProductInput, value: unknown) => {
    setFormData((previous) => ({
      ...previous,
      [field]: value,
    }));
  };

  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    await onSubmit?.(formData);
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle>{initialData ? 'Edit' : 'Create'} Product</CardTitle>
        <CardDescription>
          {initialData ? 'Update the' : 'Fill in the'} details below
        </CardDescription>
      </CardHeader>
      <CardContent>
        {error ? (
          <div className="rounded border border-destructive/40 bg-destructive/5 px-3 py-2 text-sm text-destructive">
            {error}
          </div>
        ) : null}
        <form onSubmit={handleSubmit} className="space-y-4 mt-4">
          <div className="space-y-2">
            <Label htmlFor="name">Name</Label>
            <Input
              id="name"
              type="text"
              value={formData.name ?? ''}
              onChange={(e) => handleChange('name', e.target.value)}
              disabled={isSubmitting}
              required
            />
          </div>
          <div className="space-y-2">
            <Label htmlFor="description">Description</Label>
            <Input
              id="description"
              type="text"
              value={formData.description ?? ''}
              onChange={(e) => handleChange('description', e.target.value)}
              disabled={isSubmitting}
              required
            />
          </div>
          <div className="space-y-2">
            <Label htmlFor="price">Price</Label>
            <Input
              id="price"
              type="text"
              value={formData.price ?? ''}
              onChange={(e) => handleChange('price', e.target.value)}
              disabled={isSubmitting}
              required
            />
          </div>
          <div className="flex items-center space-x-2">
            <input
              id="inStock"
              type="checkbox"
              className="h-4 w-4 rounded border border-input"
              checked={Boolean(formData.inStock)}
              onChange={(e) => handleChange('inStock', e.target.checked)}
              disabled={isSubmitting}
            />
            <Label htmlFor="inStock">In Stock</Label>
          </div>

          <div className="flex gap-2">
            <Button type="submit" disabled={isSubmitting}>
              {isSubmitting ? 'Saving...' : initialData ? 'Update' : 'Create'}
            </Button>
            <Button type="button" variant="outline" onClick={onCancel} disabled={isSubmitting}>
              Cancel
            </Button>
          </div>
        </form>
      </CardContent>
    </Card>
  );
}
