// @generated by Weldr.dev â€” database client managed. Copy to a custom module before changing connection defaults.
import { drizzle } from 'drizzle-orm/postgres-js';
import postgres from 'postgres';
import * as schema from './schema';

const connectionString = process.env.SUPABASE_DB_URL ?? process.env.DATABASE_URL;

if (!connectionString) {
  throw new Error('Weldr.dev exports require a Supabase connection string. Set SUPABASE_DB_URL or DATABASE_URL.');
}

const sslEnabledEnv = process.env.DATABASE_SSL?.toLowerCase();
const shouldForceSSL = sslEnabledEnv === 'true' || connectionString.includes('supabase.co');
const shouldDisableSSL = sslEnabledEnv === 'false';
const ssl = shouldDisableSSL ? false : shouldForceSSL ? { rejectUnauthorized: false } : undefined;

const globalForDb = globalThis as typeof globalThis & {
  __WELDR_POSTGRES__?: ReturnType<typeof postgres>;
};

const client = globalForDb.__WELDR_POSTGRES__ ?? postgres(connectionString, {
  ssl,
  max: Number.parseInt(process.env.DATABASE_POOL_SIZE ?? '10', 10),
  idle_timeout: Number.parseInt(process.env.DATABASE_IDLE_TIMEOUT ?? '60', 10),
  connect_timeout: Number.parseInt(process.env.DATABASE_CONNECT_TIMEOUT ?? '30', 10),
  prepare: false,
});

if (!globalForDb.__WELDR_POSTGRES__) {
  globalForDb.__WELDR_POSTGRES__ = client;
}

export const db = drizzle(client, { schema });
