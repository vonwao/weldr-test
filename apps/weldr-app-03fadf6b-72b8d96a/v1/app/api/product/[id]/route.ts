// @generated by Weldr.dev â€” route handler managed. Copy API routes to custom files before applying manual changes.
import { NextRequest, NextResponse } from 'next/server';
import { eq } from 'drizzle-orm';
import { db } from '@/lib/db/client';
import { product } from '@/lib/db/schema';
import type { Product, ProductInput } from '@/lib/types';

export async function GET(
  request: NextRequest,
  { params }: { params: { id: string } },
) {
  try {
    const [record] = await db.select().from(product).where(eq(product.id, params.id));
    if (!record) {
      return NextResponse.json({ error: 'Product not found' }, { status: 404 });
    }
    return NextResponse.json(record);
  } catch (error) {
    return NextResponse.json({ error: 'Failed to fetch Product' }, { status: 500 });
  }
}

export async function PUT(
  request: NextRequest,
  { params }: { params: { id: string } },
) {
  try {
    const body: ProductInput = await request.json();
    const [existing] = await db.select().from(product).where(eq(product.id, params.id));
    if (!existing) {
      return NextResponse.json({ error: 'Product not found' }, { status: 404 });
  }

  const updated: Product = {
    ...(existing as Product),
    ...body,
    id: existing.id,
    updatedAt: new Date().toISOString(),
  } as Product;

  const [saved] = await db.update(product).set(updated).where(eq(product.id, params.id)).returning();
  return NextResponse.json(saved ?? updated);
  } catch (error) {
    return NextResponse.json({ error: 'Failed to update Product' }, { status: 500 });
  }
}

export async function DELETE(
  request: NextRequest,
  { params }: { params: { id: string } },
) {
  try {
    const [existing] = await db.select().from(product).where(eq(product.id, params.id));
    if (!existing) {
      return NextResponse.json({ error: 'Product not found' }, { status: 404 });
    }

    await db.delete(product).where(eq(product.id, params.id)).returning();
    return NextResponse.json({ message: 'Product deleted successfully.' });
  } catch (error) {
    return NextResponse.json({ error: 'Failed to delete Product' }, { status: 500 });
  }
}
